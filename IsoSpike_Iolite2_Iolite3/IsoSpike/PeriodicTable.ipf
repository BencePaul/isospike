#pragma rtGlobals=1		// Use modern global access method.//	Version 1.3 (28 Jan 2014)//	The functions contained in this file were written by John Creech to complement the IsoSpike double spike addon for Iolite (www.isospike.org). //   It displays a periodic table of the elements, where clicking on an element displays information about its stable isotopes. //	The user can select isotope ratios to be used in the double spike inversion, and the mass ratios of the isotopes can be exported back to the double spike procedure. //	It has since been generalised to work as a tool for other functions or just as a reference.//	The periodic table can be used generally by calling the function PeriodicTable(). To use for double spike (as in IsoSpike) the function is called with the optional parameter DS=1 (i.e., PeriodicTable(DS=1) ).//	This source code is released under a Creative Commons Attribution-ShareAlike 3.0 Unported license. For more information, see the LICENSE.txt file bundled with this procedure or the online documentation.Function PeriodicTable([DS])	//main function, draws the periodic table	Variable DS //optional parameter to use for double spike (DS = 1, interference = 2)	DFREF saveDFR = GetDataFolderDFR()	// Save datafolder	If(stringmatch(CheckAndCreateDFPath("root:Packages:iolite:AddOns:MassTable:"),"OK")!=1)	//Create a new datafolder called "MassTable" within "Addons" to hold mass table data. 		PrintAbort("Couldn't create a new datafolder called \"MassTable\". Please check your permissions or report this bug.")	//The function "CheckandCreate..." returns "OK" if sucessfully completed datafolder creation. So this should only come up if it wasn't successful.	Endif	SetDataFolder root:Packages:iolite:AddOns:MassTable: 	//Make new folder the current data folder	Variable/G isDS = DS, completeflag = 0, elementSelected=0, currentelement // Some global variables for use with IsoSpike	String/G lastbutton="" //global variables that help with functions here		//add paths	PathInfo P_ionium		//symbolic links to the IsoSpike and DS_settings folders	String of_path = S_path + "Add ons:IsoSpike:"	PathInfo IsoSpike_path	If(V_Flag==0 || cmpstr(S_path,of_path)!=0)		NewPath/O IsoSpike_path, of_path	Endif	PathInfo DS_settings	of_path+="DS_settings:"	If(V_Flag==0 || cmpstr(S_path,of_path)!=0)		NewPath/O DS_settings, of_path	Endif	//Load required files	if(!WaveExists(PeriodicTableInfo))		LoadWave/H/Q/P=IsoSpike_path "PeriodicTableInfo.ibw"  		if (V_flag < 1)			print "Couldn't find required file (PeriodicTableInfo). Aborting"			abort		endif	endif	Wave/T PeriodicTableInfo //now reference the loaded wave	if(!WaveExists(PeriodicMasses))		LoadWave/H/Q/P=IsoSpike_path "PeriodicMasses.ibw"  		if (V_flag < 1)			print "Couldn't find required file (PeriodicMasses). Aborting"			abort		endif	endif		drawPT()	//	SetDataFolder saveDFR	Return 1End	Function drawPT()	Wave/T PeriodicTableInfo	Wave PeriodicMasses	NVAR isDS, completeFlag	PauseUpdate; Silent 1		// building Periodic Table window...	DoWindow isoPTPanel		//	check if window already exists	if(V_Flag==1)	//if this window already exists		killwindow isoPTPanel //then kill it	endif //otherwise, just build it..			//set panel variables	Variable pleft=220,ptop=40,pright=pleft+597,pbottom=ptop+245	// Set panel size  pleft=440,ptop=40,pright=pleft+560,pbottom=ptop+230	NewPanel /W=(pleft,ptop,pright,pbottom) /N=isoPTPanel as "Periodic Table: Select element"	SetActiveSubwindow isoPTPanel	ModifyPanel cbRGB=(21845,21845,21845) //background colour	SetDrawLayer UserBack		Variable left=10,top=5									//this sets position within panel		variable bw=32,bh=24 					//button width and height	string appear = "native" 		//	Set mode for colouring the periodic table. There are 10 preset colours. To add a new scheme, make a column with the mode name for a label, add that label to the list, and add numbers in the column corresponding to the colour for the relevant grouping	//	Colour list: 1 = light blue, 2 = purple, 3 = darkorange, 4 = light orange, 5 = green, 6 = blue, 7 = light green, 8 = yellow, 9 = pink, 10 = light purple	// 	Already in PeriodicTableInfo:	// 	"Class" : nonmetal = 1, noble = 2, alkalimetal = 3, alkaliearth = 4, metalloid = 5, halogen = 6, poormetal = 7, transitionmetal = 8, lanthanide = 9, actinide = 10	// 	"Block": s = 9, p = 8, d = 1, f = 7 	//	"Goldschmidt": Atmophile = 1, Lithophile = 4, Siderophile = 10, Chalcophile = 8	string/G colourmode // Can still set statically, e.g. = "Class" or ="Block"  	String/G colourmodelist = "Class;Block;Goldschmidt;"  //add more here	String pathtomodelist = "root:Packages:iolite:AddOns:MassTable:colourmodelist"	if(cmpstr(colourmode,"")==0) // default colourmode is class		colourmode = "Class"	endif	//make popup list with the current colourmode already selected 	variable x=0,  z=0 	for(x=0;x<itemsinlist(colourmodelist,";");x+=1)		if(cmpstr(stringfromlist(x,colourmodelist,";"),colourmode)==0)			z=x + 1		endif	endfor	PopupMenu colourmode pos={115,18},value=#pathtomodelist,help={"Select color mode"},proc=ColourmodePopup,mode=z	Button PTclose,pos={left,top+8*bh},size={bw*2,bh},proc=doPTstuff,title="Close", appearance={$appear}		drawPTbuttons(colourmode)		if(isDS==1) //If we're not doing DS we don't need to return anything but if we are we do.		PauseForUser isoPTPanel //Have to stop the function exiting until it's complete.		if(completeFlag==1) //just for case of using with DS=1 with IsoSpike. If export worked, returns 1 and IsoSpike  continues, otherwise aborts IsoSpike execution.			Return 1		else			Return 0		endif	endifendFunction drawPTbuttons(colourmode)	String colourmode	Wave/T PeriodicTableInfo	Wave PeriodicMasses	String/g currentColourMode = colourmode		Variable left=10,top=5									//this sets position within panel		variable bw=32,bh=24 					//button width and height	string appear = "native" 	//draw the periodic table	drawaction /L=userback /W=isoPTPanel delete, getgroup=PTbuttons	SetActiveSubwindow isoPTPanel	SetDrawEnv gstart,gname=PTbuttons	variable boxno 	for(boxno=0;boxno<dimsize(PeriodicTableInfo,0);boxno+=1)		String boxname = "a" + PeriodicTableInfo[boxno][%Z]		string symbol = PeriodicTableInfo[boxno][%Symbol]		variable group = str2num(PeriodicTableInfo[boxno][%Group])		variable period = str2num(PeriodicTableInfo[boxno][%Period])		variable boxcolorr, boxcolorg, boxcolorb							//preset box colours used by colourmode		if(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"0")==0)			boxcolorr = 65535; boxcolorg = 65535; boxcolorb = 65535	//white		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"1")==0)			boxcolorr = 32768; boxcolorg = 54615; boxcolorb = 65535	//light blue		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"2")==0)			boxcolorr = 32768; boxcolorg = 32770; boxcolorb = 65535	//purple		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"3")==0)			boxcolorr = 39321; boxcolorg = 13101; boxcolorb = 1			//dark orange		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"4")==0)			boxcolorr = 65535; boxcolorg = 32764; boxcolorb = 16385	//light orange		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"5")==0)			boxcolorr = 0; boxcolorg = 13107; boxcolorb = 0				//green		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"6")==0)			boxcolorr = 32768; boxcolorg = 40777; boxcolorb = 65535	//blue		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"7")==0)			boxcolorr = 19675; boxcolorg = 39321; boxcolorb = 1			//light green		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"8")==0)			boxcolorr = 52428; boxcolorg = 52425; boxcolorb = 1			//yellow		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"9")==0)			boxcolorr = 65535; boxcolorg = 49151; boxcolorb = 62258	//pink		elseif(cmpstr(PeriodicTableInfo[boxno][%$colourmode],"10")==0)			boxcolorr = 51664; boxcolorg = 44236; boxcolorb = 58982	//light purple		endif		//draw the buttons. if no atomic weight set (no stable isotopes), use greyed out value with no procedure attached		if(cmpstr(PeriodicTableInfo[boxno][%AtomicWeight],"")==0)			Button $boxname,pos={left+(group-1)*bw,top+(period-1)*bh},size={bw,bh},title= symbol,valueColor=(34952,34952,34952),fcolor=(boxcolorr,boxcolorg,boxcolorb),appearance={$appear},proc=doPTstuff		else			Button $boxname,pos={left+(group-1)*bw,top+(period-1)*bh},size={bw,bh},title= symbol,proc=doPTstuff,appearance={$appear},fcolor=(boxcolorr,boxcolorg,boxcolorb)		endif	endfor	SetDrawEnv gstopEndFunction ColourmodePopup (ctrlName,popNum,popStr) : PopupMenuControl  //controller for the colour mode popup menu	String ctrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string		drawPTbuttons(popStr)EndFunction doPTstuff(ba) : ButtonControl	STRUCT WMButtonAction &ba	variable element	Wave/T PeriodicTableInfo	Wave PeriodicMasses	NVAR elementSelected	NVAR isDS, currentelement	if(ba.eventcode==5) // mouse over button		if(cmpstr("PTclose",ba.ctrlName)!=0&&isDS!=1)  // if the user hasn't press close and we are not doing DS stuff			if(elementSelected!=1)  // this makes it stop changing with mouse over if an element is already selected				sscanf ba.ctrlName,"a%d",element //get element number from control name				updatePTpanel(element)	//update windows with current element				currentelement=element			endif		endif	endif	if(ba.eventcode==2) // mouseup		if(cmpstr("PTclose",ba.ctrlName)==0) //if user clicked close, kill windows and abort			killwindow isoPTpanel			abort		elseif(cmpstr("getDSinfo",ba.ctrlName)==0) //if user clicked go button to get DS info			getDSinfo(currentelement)		else		//otherwise continue			sscanf ba.ctrlName,"a%d",element			getIsoInfo(element-1)			currentelement = element			SVAR lastbutton						SetActiveSubwindow isoPTPanel			if(cmpstr(ba.ctrlName,lastbutton)==0) // if we are deselecting, set button text back to normal				Button $ba.ctrlname valueColor=(0,0,0)				lastbutton=""				elementSelected=0				return 0			else				if(cmpstr(lastbutton,"")!=0)					Button $lastbutton valueColor=(0,0,0)				endif				Button $ba.ctrlname valueColor=(39321,13101,1)				lastbutton = ba.ctrlName				elementSelected=1								if(isDS==1)					drawIsotopesSidePanel(element)				else					updatePTpanel(element)				endif				return 0			endif		endif	endifEndFunction updatePTpanel(element)	variable element	Wave/T PeriodicTableInfo	Wave PeriodicMasses	getIsoInfo(element-1)	drawIsotopesSidePanel(element)	DoWindow /w=isoPTPanel#isotopeTablePanel isotopeTablePanel //make bottom panel to display isotope info	if(V_Flag==1)	//if this panel already exists		DrawAction  /W=isoPTPanel#isotopeTablePanel delete, getgroup=IsotopeTable		DrawAction  /W=isoPTPanel delete, getgroup=PTtile		DoWindow /w=isoPTPanel#isotopeTablePanel /T isotopeTablePanel, "Naturally occuring isotopes in the mass range of " + PeriodicTableInfo[element-1][%Name]		drawIsotopeTableData(element)	else		DrawIsotopeTablePanel(element)	endif		DoWindow /w=isoPTPanel#isopanel isopanel	if(V_Flag==1)		DoWindow /w=isoPTPanel#isopanel /T isopanel, "Stable isotopes of " + PeriodicTableInfo[element-1][%Name]	endif		//Draw element tile	SVAR symbol	variable atwt = str2num(PeriodicTableInfo[element-1][%AtomicWeight])	string atwtstring	sprintf atwtstring, "%.3f", atwt	string tmpAtNo = num2str(element)	SetActiveSubwindow IsoPTpanel	SetDrawLayer UserFront	SetDrawEnv gstart,gname=PTtile	SetDrawEnv fillbgc= (65535,65535,65535)	DrawRRect 270,5,330,68	SetDrawEnv textxjust=1,textyjust=2,fsize=34	DrawText 300,15,symbol	SetDrawEnv textxjust=1,textyjust=2,fsize=12	DrawText 300,7,tmpAtNo	if(cmpstr(atwtstring,"nan")!=0)		SetDrawEnv textxjust=1,textyjust=2,fsize=10		DrawText 300,53,atwtstring	endif	SetDrawEnv gstop	return 0endFunction getIsoInfo(element)	//function finds the isotopes of the selected element from the database file	Variable element	Wave/T PeriodicTableInfo	Wave PeriodicMasses	Variable/G numIsotopes = 0		string/g listofmasses=""	string/g symbol = PeriodicTableInfo[element][%Symbol]	variable/g firstmass=0, lastmass=0		Variable x = 0	for(x=0;x<dimsize(PeriodicMasses,1);x+=1)			if(PeriodicMasses[element][x][%IsotopicAbundances]!=0) //within that element, see what isotopes exist. 			numIsotopes += 1 // count how many isotopes current element has			// also store mass of lightest and heaviest isotope to determine range of isotope table window			if(firstmass==0) 				firstmass=x			endif			lastmass=x		endif	endfor	variable thisMany=lastmass-firstmass+1	Make/O/T/N=(13) foundisotopes	Make/O/N=(13) foundabundances	foundisotopes[]=""		// need to reinitialise these waves	foundabundances[]=NaN		variable thismass=firstmass	for(x=0;x<thisMany;x+=1)		if(PeriodicMasses[element][thismass][%IsotopicAbundances]!=0)			foundabundances[x]=PeriodicMasses[element][thismass][%IsotopicAbundances]			foundisotopes[x] = num2str(thismass) + symbol 		else			foundabundances[x]=NaN			foundisotopes[x] = ""		endif		thismass+=1	endfor		variable/g startmass = round(((firstmass+lastmass)/2)-5) //set mass range based on selected element - selected element should end up in middle of table	if(firstmass<5)		startmass=0	endif	if(numIsotopes==0)  // this is to make things work if the selected element has no stable isotopes		if(element<60)			startmass = round(element * 2.2)		else			startmass = round(element * 2.56)		endif	endifend////////////////////		Isotopes side panel//////////////Function drawIsotopesSidePanel(element) //draws the right hand panel with a chart showing the isotopes and abundances of the selected element	Variable element	NVAR numisotopes, isDS, numCheckBoxes	Wave/T PeriodicTableInfo, foundisotopes //foundisotopes, 	Wave PeriodicMasses, foundabundances// foundabundances,	//Draw the isotopes side panel	DoWindow /w=isoPTPanel#isopanel isopanel //check if side panel already exists	if(V_Flag==0)	//if this panel doesn't exist yet, build it		NewPanel/EXT=0/W=(5,0,400,0)/HOST=isoPTPanel/N=isopanel as "Stable isotopes of " + PeriodicTableInfo[element-1][%Name]		ModifyPanel frameStyle=0, frameInset=1, cbRGB=(65535,65535,65535)	elseif(V_Flag==1&&isDS==1) //if we're doing DS, kill the window if it already exists and redraw (otherwise checkboxes get messed up)		killwindow isoPTPanel#isopanel		NewPanel/EXT=0/W=(5,0,400,0)/HOST=isoPTPanel/N=isopanel as "Stable isotopes of " + PeriodicTableInfo[element-1][%Name]		ModifyPanel frameStyle=0, frameInset=1, cbRGB=(65535,65535,65535)	else //otherwise just update it		DrawAction  /W=isoPTPanel#isopanel delete, getgroup=abunds	endif		SetActiveSubwindow isoPTPanel#isopanel	SetDrawEnv gstart, gname=abunds		if(isDS==1)	// if we're doing double spike, leave room for checkboxes, otherwise fill the whole frame. 		display /FG=(FL,FT,FR,*)/HOST=#  foundabundances vs foundisotopes; DelayUpdate  //set plot to not extend all the way to the bottom of the panel, leaves room for checkboxes.	else		display /FG=(FL,FT,FR,FB)/HOST=#  foundabundances vs foundisotopes; DelayUpdate  //set plot to not extend all the way to the bottom of the panel, leaves room for checkboxes.	endif	ModifyGraph tkLblRot(bottom)=90; DelayUpdate	Label left "% abundance";DelayUpdate	SetAxis left 0,*; DelayUpdate		variable m //loop to display percentages on chart	for(m=0;m<dimsize(foundabundances,0);m+=1)		string temp = num2str(foundabundances[m])		if(cmpstr(temp,"NaN")!=0)			temp+="%"			SetDrawEnv textrot= 90			DrawText 0.013+0.078*m,0.5,temp		endif	endfor	if(isDS==1) // if doing double spike, display checkboxes to select double spike ratios		Make/O/N=13 NumerCheckboxStates //make wave to hold states of numerator checkboxes		NumerCheckboxStates[] = 0 //sets states of all numerator checkboxes to zero		Variable/G gDenomIso= 1 // a global variable to hold the denominator checkbox state. Only 1 can be selected, so only need a variable				//Two rows of checkboxes to select isotopes		Variable hstart = 51, hgap = 25.2, row1 = 206, row2 = 224, row0 = 189 //sets the layout of the checkboxes //hgap = 32.5			if(numIsotopes>3) //only put checkboxes up if there are >3 isotopes (element can be used for double spike)			TitleBox title0 title="Select double spike ratios:",pos={2,row0}, frame=0 //title for top row			TitleBox title1 title="Numer.",pos={2,row1}, frame=0 //title for top row			TitleBox title2 title="Denom.",pos={2,row2}, frame=0 //title for bottom row					Button getDSinfo title="Go",pos={370,204},size={25,20},fcolor=(6558,13107,0),proc=doPTstuff,help={"press to export to DS routine"} //button to make things happen			variable boxno, hpos, counter=0			for(counter=0;counter<dimsize(foundisotopes,0);counter+=1) 	//for each point in matrix				hpos = hstart + counter * hgap									//increment horizontal position				if(cmpstr(foundisotopes[counter],"")!=0) //if there is an isotope at this mass, draw checkboxes					string denomboxname = "denomiso" + num2str(counter)					string numerboxname = "numeriso" + num2str(counter)					CheckBox $numerboxname,pos={hpos,row1},size={78,15},title="",value= 0,mode=0,proc=numerCheckProc						CheckBox $denomboxname,pos={hpos,row2},size={78,15},title="",value= 0,mode=0,proc=denomCheckProc					boxno+=1				endif			endfor		endif		PauseForUser isoPTPanel#isopanel //returns if user successfully exports ln(massratios)	endif	SetDrawEnv gstop	return 1		///JOHNendFunction getDSinfo(element)  //if using with IsoSpike (i.e., if periodic table is run with optional argument DS=1), this routine calculates the logs of the mass ratios	Variable element	Wave/T PeriodicTableInfo, foundisotopes//, foundisotopes	Wave PeriodicMasses	NVAR gDenomIso 		//state of denominator checkbox	NVAR completeflag	WAVE NumerCheckboxStates	//states of the numerator checkboxes	Make/O/N=3 IsotopeLogMassRatio //where we store the natural logs of the massratios	Make/T/O/N=3 IsotopeRatioNames // where we store the ratio names. 	Make/O/N=3 AbundanceRatio // abundance ratios so I can use for std value	SVAR symbol		if(sum(NumerCheckboxStates)!=3) //Abort if user has selected too many or too few isotope ratios.			DoAlert 0, "3 ratios required for DS inversion. " + num2str(sum(NumerCheckboxStates)) + " selected."		endif		if(sum(NumerCheckboxStates)==3) //If user has selected correct number of isotopes			if(NumerCheckboxStates[gDenomIso] == 1) //make sure none of the numerator isotopes are the same as the denominator isotope				DoAlert 0,  "Can't use denominator isotope as numerator"			else	//if all the isotopes are selected correctly, find out which ones they are, and get the ln(massratios)				variable k = 0				variable j = 0				do					variable currentmass					sscanf foundisotopes[k],"%d"+symbol,currentmass					if(k==0)						variable denomisomass						sscanf foundisotopes[gDenomIso], "%d"+symbol,denomisomass					endif											if(NumerCheckboxStates[k]==1)						IsotopeLogMassRatio[j] = ln(PeriodicMasses[element-1][currentmass][%IsotopicMasses]/PeriodicMasses[element-1][denomisomass][%IsotopicMasses]) //gets natural log of the massratio						IsotopeRatioNames[j] = foundisotopes[k] + "/" + foundisotopes[gDenomiso] //gets ratio name. only used for printing output, not necessary for DS.						AbundanceRatio[j] = PeriodicMasses[element][currentmass][%IsotopicMasses] / PeriodicMasses[element][denomisomass][%IsotopicMasses]						j +=1					endif					k += 1				while(k<dimsize(NumerCheckboxStates,0))//				print "ln(" + IsotopeRatioNames[0] + ") = " + num2str(IsotopeLogMassRatio[0])//				print "ln(" + IsotopeRatioNames[1] + ") = " + num2str(IsotopeLogMassRatio[1])//				print "ln(" + IsotopeRatioNames[2] + ") = " + num2str(IsotopeLogMassRatio[2])				printf "ln(%s) = %.8f\r",IsotopeRatioNames[0],IsotopeLogMassRatio[0]				printf "ln(%s) = %.8f\r",IsotopeRatioNames[1],IsotopeLogMassRatio[1]				printf "ln(%s) = %.8f\r",IsotopeRatioNames[2],IsotopeLogMassRatio[2]				Print "Successfully grabbed three mass ratios"				completeflag = 1				KillWindow isoPTPanel				Return 1	///JOHN//				abort			endif		endif	return 0EndFunction denomCheckProc(name,value) //procedure to control denominator checkboxes for the getDSinfo panel when DS=1. Allows only one to be selected at a time, and result is stored in global variable gDenomIso	String name	Variable value	NVAR gDenomIso	NVAR numIsotopes	Wave/T foundisotopes	   	strswitch (name) // only allow one denominator checkbox to be selected at a time    	case "denomiso0":		gDenomIso= 0          break    	case "denomiso1":		gDenomIso= 1          break	case "denomiso2":		gDenomIso= 2          break	case "denomiso3":       	gDenomIso= 3       	break	case "denomiso4":       	gDenomIso= 4       	break	case "denomiso5":       	gDenomIso= 5       	break	case "denomiso6":       	gDenomIso= 6       	break   	case "denomiso7":       	gDenomIso= 7       	break	case "denomiso8":       	gDenomIso= 8	     	break    	case "denomiso9":       	gDenomIso= 9	     	break    	case "denomiso10":       	gDenomIso= 10	     	break     	case "denomiso11":       	gDenomIso= 11	     	break     	 case "denomiso12":       	gDenomIso= 12	     	break    endswitch	if(numIsotopes>3)		variable counter		for(counter=0;counter<dimsize(foundisotopes,0);counter+=1) 	//for each point in matrix			if(cmpstr(foundisotopes[counter],"")!=0) //if there is an isotope at this mass, draw checkboxes				string denomboxname = "denomiso" + num2str(counter)				CheckBox $denomboxname,value= gDenomIso==counter			endif		endfor	endifEndFunction numerCheckProc(name,value) //procedure to get info from numerator checkboxes for the getDSinfo panel when DS=1. States are stored in a wave. We later check how many are checked by summing all points in that wave.   	String name	Variable value	Wave NumerCheckboxStates	string temp	variable box		sscanf name,"numeriso%s",temp	box = str2num(temp)	NumerCheckboxStates[box] = valueEnd////////////////////		Isotope table bottom panel//////////////Function DrawIsotopeTablePanel(element) 		//Draw isotope table panel	Variable element	Wave/T PeriodicTableInfo	Wave PeriodicMasses	variable numrows = 9, panelheight = 30 + numrows*25, rowtop = 30 + 4*25	variable/g zIncDown = 1 // direction z increases in isotope panel. init variable here (default to 1) but used in drawIsotopeTableData()		NewPanel/EXT=2/W=(0,0,600,panelheight)/HOST=isoPTPanel/N=isotopeTablePanel as "Naturally occuring isotopes in the mass range of " + PeriodicTableInfo[element-1][%Name]	ModifyPanel frameStyle=0, frameInset=1, cbRGB=(65535,65535,65535)	SetWindow isoPTpanel#isotopeTablePanel hook(s)= IsotopeTableHook	SetDrawEnv fillbgc= (65535,65535,65535),linethick= 0.00;DelayUpdate	DrawRect 600,panelheight,0,0	SetDrawEnv linethick= 0.20,dash= 1;DelayUpdate	DrawLine 0,0,60,30	DrawText 10,30,"Z"	DrawText 45,20,"A"	Variable thislinex, thisliney	Variable linehstep = 54, linevstep = 25		//draw grid and highlight to make it easier to read	SetDrawEnv fillfgc= (49151,60031,65535),linethick= 0.00;DelayUpdate	DrawRect 0,rowtop,600,rowtop+25  		//highlight	variable x	for(x=0;x<12;x+=1)						//grid		thislinex = 60 + x *  linehstep		SetDrawEnv dash= 1		DrawLine thislinex,0,thislinex,panelheight	endfor	variable y	for(y=0;y<12;y+=1)		thisliney = 30 + y *  linevstep		SetDrawEnv dash= 1		DrawLine 6,thisliney,600,thisliney	endfor		drawIsotopeTableData(element) //populate the tableendFunction drawIsotopeTableData(element) 		//Draw isotope table data	variable element	Wave/T PeriodicTableInfo					//Reference waves and globals	Wave PeriodicMasses	NVAR zIncDown	NVAR firstmass, lastmass, startmass	 	variable hstart = 85, hstep = 54			//layout parameters	variable vstart, vstep	variable thisatomicno, thismassno	variable thisrow=0, thiscol=0	variable thisx = 10, thisy = 20	variable vtitle1 = hstart - 80, vtitle2 = hstart - 60, htitle = 20			if(zIncDown==1) 			// when zIncDown is true, draw with atomic number increasing downwards		vstep = 25		if(element<5)			vstart = 50 + (5-element)*vstep		else			vstart = 50		endif	elseif(zIncDown==0)		// when false, draw with atomic number increasing upwards		vstep = -25		if(element<5)			vstart = 250 + (5-element)*vstep		else			vstart = 250		endif	endif	//draw all the info on the panel	variable range = 4	variable startrow = element -1 - range,	 endrow = element + range	string tmpabund	SetActiveSubwindow isoPTPanel#isotopeTablePanel	SetDrawEnv gstart,gname=isotopeTable	For(thisatomicno=startrow;thisatomicno<endrow;thisatomicno+=1)			if(thisatomicno>=0&&thisatomicno<92)			For(thismassno=startmass;thismassno<(startmass+10);thismassno+=1)				if(thismassno<239)					thisx = hstart+thiscol*hstep					thisy = vstart+thisrow*vstep					if(thisrow==0)	//draw column headers (i.e. mass number). Only need to do once so do while we draw top row						string titleZ = num2str(thismassno)						SetDrawEnv textxjust=1						DrawText /w=isoPTPanel#isotopeTablePanel thisx,htitle,titleZ					endif					if(PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]!=NaN|PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]!=0) //this is just so we don't fill the table with zeros where isotopes don't exist						if(PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]<1)							sprintf tmpabund, "%.3f", PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]							SetDrawEnv textxjust=1							DrawText /w=isoPTPanel#isotopeTablePanel thisx,thisy,tmpabund //draw the actual abundance info						elseif(PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]>=1&&PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]<100)							sprintf tmpabund, "%.2f", PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]							SetDrawEnv textxjust=1							DrawText /w=isoPTPanel#isotopeTablePanel thisx,thisy,tmpabund //draw the actual abundance info						else							sprintf tmpabund, "%.0f", PeriodicMasses[thisatomicno][thismassno][%IsotopicAbundances]							SetDrawEnv textxjust=1							DrawText /w=isoPTPanel#isotopeTablePanel thisx,thisy,tmpabund //draw the actual abundance info						endif					endif					thiscol+=1				endif			endfor			thisrow+=1			thiscol = 0			string titleA = num2str(thisatomicno+1)	// +1 because the rows in the data file start at zero			DrawText /w=isoPTPanel#isotopeTablePanel vtitle1,thisy,titleA //draw			string rowname = "(" + PeriodicTableInfo[thisatomicno][%Symbol] + ")"			DrawText /w=isoPTPanel#isotopeTablePanel vtitle2,thisy,rowname //title for top row		endif	endfor	SetDrawEnv gstopendFunction IsotopeTableHook(s)	STRUCT WMWinHookStruct &s	NVAR zIncDown, currentelement		if(s.mouseLoc.h<60)	//if cursor is in left column		if(s.eventcode==5)	//check for mouse up event			if(zIncDown==0)	//toggle zIncDown				zIncDown=1			elseif(zIncDown==1)				zIncDown=0			endif			DrawAction /W=isoPTPanel#isotopeTablePanel delete, getgroup=IsotopeTable		//clear and redraw				DrawIsotopeTableData(currentelement)		endif	endifEnd